(()=>{var e={797:e=>{var t="undefined"!=typeof process&&process.pid?process.pid.toString(36):"";function n(){var e=Date.now(),t=n.last||e;return n.last=e>t?e:t+1}e.exports=e.exports.default=function(e,r){return(e||"")+""+t+n().toString(36)+(r||"")},e.exports.process=function(e,r){return(e||"")+t+n().toString(36)+(r||"")},e.exports.time=function(e,t){return(e||"")+n().toString(36)+(t||"")}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e={};function t(e,t){return function(){return e.apply(t,arguments)}}n.r(e),n.d(e,{hasBrowserEnv:()=>ie,hasStandardBrowserEnv:()=>oe,hasStandardBrowserWebWorkerEnv:()=>ce,origin:()=>le});const{toString:r}=Object.prototype,{getPrototypeOf:s}=Object,i=(o=Object.create(null),e=>{const t=r.call(e);return o[t]||(o[t]=t.slice(8,-1).toLowerCase())});var o;const a=e=>(e=e.toLowerCase(),t=>i(t)===e),c=e=>t=>typeof t===e,{isArray:l}=Array,u=c("undefined"),d=a("ArrayBuffer"),f=c("string"),p=c("function"),h=c("number"),m=e=>null!==e&&"object"==typeof e,g=e=>{if("object"!==i(e))return!1;const t=s(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},y=a("Date"),b=a("File"),w=a("Blob"),_=a("FileList"),v=a("URLSearchParams"),[E,S,O,R]=["ReadableStream","Request","Response","Headers"].map(a);function T(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,s;if("object"!=typeof e&&(e=[e]),l(e))for(r=0,s=e.length;r<s;r++)t.call(null,e[r],r,e);else{const s=n?Object.getOwnPropertyNames(e):Object.keys(e),i=s.length;let o;for(r=0;r<i;r++)o=s[r],t.call(null,e[o],o,e)}}function A(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,s=n.length;for(;s-- >0;)if(r=n[s],t===r.toLowerCase())return r;return null}const k="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,x=e=>!u(e)&&e!==k,L=(j="undefined"!=typeof Uint8Array&&s(Uint8Array),e=>j&&e instanceof j);var j;const C=a("HTMLFormElement"),N=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),P=a("RegExp"),D=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};T(n,((n,s)=>{let i;!1!==(i=t(n,s,e))&&(r[s]=i||n)})),Object.defineProperties(e,r)},F="abcdefghijklmnopqrstuvwxyz",B="0123456789",U={DIGIT:B,ALPHA:F,ALPHA_DIGIT:F+F.toUpperCase()+B},q=a("AsyncFunction"),M={isArray:l,isArrayBuffer:d,isBuffer:function(e){return null!==e&&!u(e)&&null!==e.constructor&&!u(e.constructor)&&p(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||p(e.append)&&("formdata"===(t=i(e))||"object"===t&&p(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&d(e.buffer),t},isString:f,isNumber:h,isBoolean:e=>!0===e||!1===e,isObject:m,isPlainObject:g,isReadableStream:E,isRequest:S,isResponse:O,isHeaders:R,isUndefined:u,isDate:y,isFile:b,isBlob:w,isRegExp:P,isFunction:p,isStream:e=>m(e)&&p(e.pipe),isURLSearchParams:v,isTypedArray:L,isFileList:_,forEach:T,merge:function e(){const{caseless:t}=x(this)&&this||{},n={},r=(r,s)=>{const i=t&&A(n,s)||s;g(n[i])&&g(r)?n[i]=e(n[i],r):g(r)?n[i]=e({},r):l(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&T(arguments[e],r);return n},extend:(e,n,r,{allOwnKeys:s}={})=>(T(n,((n,s)=>{r&&p(n)?e[s]=t(n,r):e[s]=n}),{allOwnKeys:s}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let i,o,a;const c={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),o=i.length;o-- >0;)a=i[o],r&&!r(a,e,t)||c[a]||(t[a]=e[a],c[a]=!0);e=!1!==n&&s(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:a,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(l(e))return e;let t=e.length;if(!h(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:C,hasOwnProperty:N,hasOwnProp:N,reduceDescriptors:D,freezeMethods:e=>{D(e,((t,n)=>{if(p(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];p(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return l(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:A,global:k,isContextDefined:x,ALPHABET:U,generateString:(e=16,t=U.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&p(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(m(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const s=l(e)?[]:{};return T(e,((e,t)=>{const i=n(e,r+1);!u(i)&&(s[t]=i)})),t[r]=void 0,s}}return e};return n(e,0)},isAsyncFn:q,isThenable:e=>e&&(m(e)||p(e))&&p(e.then)&&p(e.catch)};function I(e,t,n,r,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),s&&(this.response=s)}M.inherits(I,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:M.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const $=I.prototype,H={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{H[e]={value:e}})),Object.defineProperties(I,H),Object.defineProperty($,"isAxiosError",{value:!0}),I.from=(e,t,n,r,s,i)=>{const o=Object.create($);return M.toFlatObject(e,o,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),I.call(o,e.message,t,n,r,s),o.cause=e,o.name=e.name,i&&Object.assign(o,i),o};const z=I;function J(e){return M.isPlainObject(e)||M.isArray(e)}function W(e){return M.endsWith(e,"[]")?e.slice(0,-2):e}function K(e,t,n){return e?e.concat(t).map((function(e,t){return e=W(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const V=M.toFlatObject(M,{},null,(function(e){return/^is[A-Z]/.test(e)})),G=function(e,t,n){if(!M.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=M.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!M.isUndefined(t[e])}))).metaTokens,s=n.visitor||l,i=n.dots,o=n.indexes,a=(n.Blob||"undefined"!=typeof Blob&&Blob)&&M.isSpecCompliantForm(t);if(!M.isFunction(s))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(M.isDate(e))return e.toISOString();if(!a&&M.isBlob(e))throw new z("Blob is not supported. Use a Buffer instead.");return M.isArrayBuffer(e)||M.isTypedArray(e)?a&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function l(e,n,s){let a=e;if(e&&!s&&"object"==typeof e)if(M.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(M.isArray(e)&&function(e){return M.isArray(e)&&!e.some(J)}(e)||(M.isFileList(e)||M.endsWith(n,"[]"))&&(a=M.toArray(e)))return n=W(n),a.forEach((function(e,r){!M.isUndefined(e)&&null!==e&&t.append(!0===o?K([n],r,i):null===o?n:n+"[]",c(e))})),!1;return!!J(e)||(t.append(K(s,n,i),c(e)),!1)}const u=[],d=Object.assign(V,{defaultVisitor:l,convertValue:c,isVisitable:J});if(!M.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!M.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),M.forEach(n,(function(n,i){!0===(!(M.isUndefined(n)||null===n)&&s.call(t,n,M.isString(i)?i.trim():i,r,d))&&e(n,r?r.concat(i):[i])})),u.pop()}}(e),t};function X(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Q(e,t){this._pairs=[],e&&G(e,this,t)}const Z=Q.prototype;Z.append=function(e,t){this._pairs.push([e,t])},Z.toString=function(e){const t=e?function(t){return e.call(this,t,X)}:X;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Y=Q;function ee(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function te(e,t,n){if(!t)return e;const r=n&&n.encode||ee,s=n&&n.serialize;let i;if(i=s?s(t,n):M.isURLSearchParams(t)?t.toString():new Y(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}const ne=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){M.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},re={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},se={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Y,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},ie="undefined"!=typeof window&&"undefined"!=typeof document,oe=(ae="undefined"!=typeof navigator&&navigator.product,ie&&["ReactNative","NativeScript","NS"].indexOf(ae)<0);var ae;const ce="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,le=ie&&window.location.href||"http://localhost",ue={...e,...se},de=function(e){function t(e,n,r,s){let i=e[s++];if("__proto__"===i)return!0;const o=Number.isFinite(+i),a=s>=e.length;return i=!i&&M.isArray(r)?r.length:i,a?(M.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!o):(r[i]&&M.isObject(r[i])||(r[i]=[]),t(e,n,r[i],s)&&M.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const s=n.length;let i;for(r=0;r<s;r++)i=n[r],t[i]=e[i];return t}(r[i])),!o)}if(M.isFormData(e)&&M.isFunction(e.entries)){const n={};return M.forEachEntry(e,((e,r)=>{t(function(e){return M.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},fe={transitional:re,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,s=M.isObject(e);if(s&&M.isHTMLForm(e)&&(e=new FormData(e)),M.isFormData(e))return r?JSON.stringify(de(e)):e;if(M.isArrayBuffer(e)||M.isBuffer(e)||M.isStream(e)||M.isFile(e)||M.isBlob(e)||M.isReadableStream(e))return e;if(M.isArrayBufferView(e))return e.buffer;if(M.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(s){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return G(e,new ue.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ue.isNode&&M.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=M.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return G(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return s||r?(t.setContentType("application/json",!1),function(e){if(M.isString(e))try{return(0,JSON.parse)(e),M.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||fe.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(M.isResponse(e)||M.isReadableStream(e))return e;if(e&&M.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw z.from(e,z.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ue.classes.FormData,Blob:ue.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};M.forEach(["delete","get","head","post","put","patch"],(e=>{fe.headers[e]={}}));const pe=fe,he=M.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),me=Symbol("internals");function ge(e){return e&&String(e).trim().toLowerCase()}function ye(e){return!1===e||null==e?e:M.isArray(e)?e.map(ye):String(e)}function be(e,t,n,r,s){return M.isFunction(r)?r.call(this,t,n):(s&&(t=n),M.isString(t)?M.isString(r)?-1!==t.indexOf(r):M.isRegExp(r)?r.test(t):void 0:void 0)}class we{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function s(e,t,n){const s=ge(t);if(!s)throw new Error("header name must be a non-empty string");const i=M.findKey(r,s);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=ye(e))}const i=(e,t)=>M.forEach(e,((e,n)=>s(e,n,t)));if(M.isPlainObject(e)||e instanceof this.constructor)i(e,t);else if(M.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))i((e=>{const t={};let n,r,s;return e&&e.split("\n").forEach((function(e){s=e.indexOf(":"),n=e.substring(0,s).trim().toLowerCase(),r=e.substring(s+1).trim(),!n||t[n]&&he[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(M.isHeaders(e))for(const[t,r]of e.entries())s(r,t,n);else null!=e&&s(t,e,n);return this}get(e,t){if(e=ge(e)){const n=M.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(M.isFunction(t))return t.call(this,e,n);if(M.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=ge(e)){const n=M.findKey(this,e);return!(!n||void 0===this[n]||t&&!be(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function s(e){if(e=ge(e)){const s=M.findKey(n,e);!s||t&&!be(0,n[s],s,t)||(delete n[s],r=!0)}}return M.isArray(e)?e.forEach(s):s(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const s=t[n];e&&!be(0,this[s],s,e,!0)||(delete this[s],r=!0)}return r}normalize(e){const t=this,n={};return M.forEach(this,((r,s)=>{const i=M.findKey(n,s);if(i)return t[i]=ye(r),void delete t[s];const o=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(s):String(s).trim();o!==s&&delete t[s],t[o]=ye(r),n[o]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return M.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&M.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[me]=this[me]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=ge(e);t[r]||(function(e,t){const n=M.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,s){return this[r].call(this,t,e,n,s)},configurable:!0})}))}(n,e),t[r]=!0)}return M.isArray(e)?e.forEach(r):r(e),this}}we.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),M.reduceDescriptors(we.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),M.freezeMethods(we);const _e=we;function ve(e,t){const n=this||pe,r=t||n,s=_e.from(r.headers);let i=r.data;return M.forEach(e,(function(e){i=e.call(n,i,s.normalize(),t?t.status:void 0)})),s.normalize(),i}function Ee(e){return!(!e||!e.__CANCEL__)}function Se(e,t,n){z.call(this,null==e?"canceled":e,z.ERR_CANCELED,t,n),this.name="CanceledError"}M.inherits(Se,z,{__CANCEL__:!0});const Oe=Se;function Re(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new z("Request failed with status code "+n.status,[z.ERR_BAD_REQUEST,z.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const Te=(e,t,n=3)=>{let r=0;const s=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let s,i=0,o=0;return t=void 0!==t?t:1e3,function(a){const c=Date.now(),l=r[o];s||(s=c),n[i]=a,r[i]=c;let u=o,d=0;for(;u!==i;)d+=n[u++],u%=e;if(i=(i+1)%e,i===o&&(o=(o+1)%e),c-s<t)return;const f=l&&c-l;return f?Math.round(1e3*d/f):void 0}}(50,250);return function(e,t){let n=0;const r=1e3/t;let s=null;return function(){const t=!0===this,i=Date.now();if(t||i-n>r)return s&&(clearTimeout(s),s=null),n=i,e.apply(null,arguments);s||(s=setTimeout((()=>(s=null,n=Date.now(),e.apply(null,arguments))),r-(i-n)))}}((n=>{const i=n.loaded,o=n.lengthComputable?n.total:void 0,a=i-r,c=s(a);r=i;const l={loaded:i,total:o,progress:o?i/o:void 0,bytes:a,rate:c||void 0,estimated:c&&o&&i<=o?(o-i)/c:void 0,event:n,lengthComputable:null!=o};l[t?"download":"upload"]=!0,e(l)}),n)},Ae=ue.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=M.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0},ke=ue.hasStandardBrowserEnv?{write(e,t,n,r,s,i){const o=[e+"="+encodeURIComponent(t)];M.isNumber(n)&&o.push("expires="+new Date(n).toGMTString()),M.isString(r)&&o.push("path="+r),M.isString(s)&&o.push("domain="+s),!0===i&&o.push("secure"),document.cookie=o.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function xe(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Le=e=>e instanceof _e?{...e}:e;function je(e,t){t=t||{};const n={};function r(e,t,n){return M.isPlainObject(e)&&M.isPlainObject(t)?M.merge.call({caseless:n},e,t):M.isPlainObject(t)?M.merge({},t):M.isArray(t)?t.slice():t}function s(e,t,n){return M.isUndefined(t)?M.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!M.isUndefined(t))return r(void 0,t)}function o(e,t){return M.isUndefined(t)?M.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function a(n,s,i){return i in t?r(n,s):i in e?r(void 0,n):void 0}const c={url:i,method:i,data:i,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:a,headers:(e,t)=>s(Le(e),Le(t),!0)};return M.forEach(Object.keys(Object.assign({},e,t)),(function(r){const i=c[r]||s,o=i(e[r],t[r],r);M.isUndefined(o)&&i!==a||(n[r]=o)})),n}const Ce=e=>{const t=je({},e);let n,{data:r,withXSRFToken:s,xsrfHeaderName:i,xsrfCookieName:o,headers:a,auth:c}=t;if(t.headers=a=_e.from(a),t.url=te(xe(t.baseURL,t.url),e.params,e.paramsSerializer),c&&a.set("Authorization","Basic "+btoa((c.username||"")+":"+(c.password?unescape(encodeURIComponent(c.password)):""))),M.isFormData(r))if(ue.hasStandardBrowserEnv||ue.hasStandardBrowserWebWorkerEnv)a.setContentType(void 0);else if(!1!==(n=a.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];a.setContentType([e||"multipart/form-data",...t].join("; "))}if(ue.hasStandardBrowserEnv&&(s&&M.isFunction(s)&&(s=s(t)),s||!1!==s&&Ae(t.url))){const e=i&&o&&ke.read(o);e&&a.set(i,e)}return t},Ne="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=Ce(e);let s=r.data;const i=_e.from(r.headers).normalize();let o,{responseType:a}=r;function c(){r.cancelToken&&r.cancelToken.unsubscribe(o),r.signal&&r.signal.removeEventListener("abort",o)}let l=new XMLHttpRequest;function u(){if(!l)return;const r=_e.from("getAllResponseHeaders"in l&&l.getAllResponseHeaders());Re((function(e){t(e),c()}),(function(e){n(e),c()}),{data:a&&"text"!==a&&"json"!==a?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:r,config:e,request:l}),l=null}l.open(r.method.toUpperCase(),r.url,!0),l.timeout=r.timeout,"onloadend"in l?l.onloadend=u:l.onreadystatechange=function(){l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))&&setTimeout(u)},l.onabort=function(){l&&(n(new z("Request aborted",z.ECONNABORTED,r,l)),l=null)},l.onerror=function(){n(new z("Network Error",z.ERR_NETWORK,r,l)),l=null},l.ontimeout=function(){let e=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const t=r.transitional||re;r.timeoutErrorMessage&&(e=r.timeoutErrorMessage),n(new z(e,t.clarifyTimeoutError?z.ETIMEDOUT:z.ECONNABORTED,r,l)),l=null},void 0===s&&i.setContentType(null),"setRequestHeader"in l&&M.forEach(i.toJSON(),(function(e,t){l.setRequestHeader(t,e)})),M.isUndefined(r.withCredentials)||(l.withCredentials=!!r.withCredentials),a&&"json"!==a&&(l.responseType=r.responseType),"function"==typeof r.onDownloadProgress&&l.addEventListener("progress",Te(r.onDownloadProgress,!0)),"function"==typeof r.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",Te(r.onUploadProgress)),(r.cancelToken||r.signal)&&(o=t=>{l&&(n(!t||t.type?new Oe(null,e,l):t),l.abort(),l=null)},r.cancelToken&&r.cancelToken.subscribe(o),r.signal&&(r.signal.aborted?o():r.signal.addEventListener("abort",o)));const d=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);d&&-1===ue.protocols.indexOf(d)?n(new z("Unsupported protocol "+d+":",z.ERR_BAD_REQUEST,e)):l.send(s||null)}))},Pe=(e,t)=>{let n,r=new AbortController;const s=function(e){if(!n){n=!0,o();const t=e instanceof Error?e:this.reason;r.abort(t instanceof z?t:new Oe(t instanceof Error?t.message:t))}};let i=t&&setTimeout((()=>{s(new z(`timeout ${t} of ms exceeded`,z.ETIMEDOUT))}),t);const o=()=>{e&&(i&&clearTimeout(i),i=null,e.forEach((e=>{e&&(e.removeEventListener?e.removeEventListener("abort",s):e.unsubscribe(s))})),e=null)};e.forEach((e=>e&&e.addEventListener&&e.addEventListener("abort",s)));const{signal:a}=r;return a.unsubscribe=o,[a,()=>{i&&clearTimeout(i),i=null}]},De=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,s=0;for(;s<n;)r=s+t,yield e.slice(s,r),s=r},Fe=(e,t,n,r,s)=>{const i=async function*(e,t,n){for await(const r of e)yield*De(ArrayBuffer.isView(r)?r:await n(String(r)),t)}(e,t,s);let o=0;return new ReadableStream({type:"bytes",async pull(e){const{done:t,value:s}=await i.next();if(t)return e.close(),void r();let a=s.byteLength;n&&n(o+=a),e.enqueue(new Uint8Array(s))},cancel:e=>(r(e),i.return())},{highWaterMark:2})},Be=(e,t)=>{const n=null!=e;return r=>setTimeout((()=>t({lengthComputable:n,total:e,loaded:r})))},Ue="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,qe=Ue&&"function"==typeof ReadableStream,Me=Ue&&("function"==typeof TextEncoder?(Ie=new TextEncoder,e=>Ie.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Ie;const $e=qe&&(()=>{let e=!1;const t=new Request(ue.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),He=qe&&!!(()=>{try{return M.isReadableStream(new Response("").body)}catch(e){}})(),ze={stream:He&&(e=>e.body)};var Je;Ue&&(Je=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!ze[e]&&(ze[e]=M.isFunction(Je[e])?t=>t[e]():(t,n)=>{throw new z(`Response type '${e}' is not supported`,z.ERR_NOT_SUPPORT,n)})})));const We={http:null,xhr:Ne,fetch:Ue&&(async e=>{let{url:t,method:n,data:r,signal:s,cancelToken:i,timeout:o,onDownloadProgress:a,onUploadProgress:c,responseType:l,headers:u,withCredentials:d="same-origin",fetchOptions:f}=Ce(e);l=l?(l+"").toLowerCase():"text";let p,h,[m,g]=s||i||o?Pe([s,i],o):[];const y=()=>{!p&&setTimeout((()=>{m&&m.unsubscribe()})),p=!0};let b;try{if(c&&$e&&"get"!==n&&"head"!==n&&0!==(b=await(async(e,t)=>{const n=M.toFiniteNumber(e.getContentLength());return null==n?(async e=>null==e?0:M.isBlob(e)?e.size:M.isSpecCompliantForm(e)?(await new Request(e).arrayBuffer()).byteLength:M.isArrayBufferView(e)?e.byteLength:(M.isURLSearchParams(e)&&(e+=""),M.isString(e)?(await Me(e)).byteLength:void 0))(t):n})(u,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});M.isFormData(r)&&(e=n.headers.get("content-type"))&&u.setContentType(e),n.body&&(r=Fe(n.body,65536,Be(b,Te(c)),null,Me))}M.isString(d)||(d=d?"cors":"omit"),h=new Request(t,{...f,signal:m,method:n.toUpperCase(),headers:u.normalize().toJSON(),body:r,duplex:"half",withCredentials:d});let s=await fetch(h);const i=He&&("stream"===l||"response"===l);if(He&&(a||i)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=s[t]}));const t=M.toFiniteNumber(s.headers.get("content-length"));s=new Response(Fe(s.body,65536,a&&Be(t,Te(a,!0)),i&&y,Me),e)}l=l||"text";let o=await ze[M.findKey(ze,l)||"text"](s,e);return!i&&y(),g&&g(),await new Promise(((t,n)=>{Re(t,n,{data:o,headers:_e.from(s.headers),status:s.status,statusText:s.statusText,config:e,request:h})}))}catch(t){if(y(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new z("Network Error",z.ERR_NETWORK,e,h),{cause:t.cause||t});throw z.from(t,t&&t.code,e,h)}})};M.forEach(We,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Ke=e=>`- ${e}`,Ve=e=>M.isFunction(e)||null===e||!1===e,Ge=e=>{e=M.isArray(e)?e:[e];const{length:t}=e;let n,r;const s={};for(let i=0;i<t;i++){let t;if(n=e[i],r=n,!Ve(n)&&(r=We[(t=String(n)).toLowerCase()],void 0===r))throw new z(`Unknown adapter '${t}'`);if(r)break;s[t||"#"+i]=r}if(!r){const e=Object.entries(s).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(Ke).join("\n"):" "+Ke(e[0]):"as no adapter specified";throw new z("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Xe(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Oe(null,e)}function Qe(e){return Xe(e),e.headers=_e.from(e.headers),e.data=ve.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Ge(e.adapter||pe.adapter)(e).then((function(t){return Xe(e),t.data=ve.call(e,e.transformResponse,t),t.headers=_e.from(t.headers),t}),(function(t){return Ee(t)||(Xe(e),t&&t.response&&(t.response.data=ve.call(e,e.transformResponse,t.response),t.response.headers=_e.from(t.response.headers))),Promise.reject(t)}))}const Ze={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Ze[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Ye={};Ze.transitional=function(e,t,n){function r(e,t){return"[Axios v1.7.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,s,i)=>{if(!1===e)throw new z(r(s," has been removed"+(t?" in "+t:"")),z.ERR_DEPRECATED);return t&&!Ye[s]&&(Ye[s]=!0,console.warn(r(s," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,s,i)}};const et={assertOptions:function(e,t,n){if("object"!=typeof e)throw new z("options must be an object",z.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let s=r.length;for(;s-- >0;){const i=r[s],o=t[i];if(o){const t=e[i],n=void 0===t||o(t,i,e);if(!0!==n)throw new z("option "+i+" must be "+n,z.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new z("Unknown option "+i,z.ERR_BAD_OPTION)}},validators:Ze},tt=et.validators;class nt{constructor(e){this.defaults=e,this.interceptors={request:new ne,response:new ne}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=je(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:s}=t;void 0!==n&&et.assertOptions(n,{silentJSONParsing:tt.transitional(tt.boolean),forcedJSONParsing:tt.transitional(tt.boolean),clarifyTimeoutError:tt.transitional(tt.boolean)},!1),null!=r&&(M.isFunction(r)?t.paramsSerializer={serialize:r}:et.assertOptions(r,{encode:tt.function,serialize:tt.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=s&&M.merge(s.common,s[t.method]);s&&M.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete s[e]})),t.headers=_e.concat(i,s);const o=[];let a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,o.unshift(e.fulfilled,e.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,d=0;if(!a){const e=[Qe.bind(this),void 0];for(e.unshift.apply(e,o),e.push.apply(e,c),u=e.length,l=Promise.resolve(t);d<u;)l=l.then(e[d++],e[d++]);return l}u=o.length;let f=t;for(d=0;d<u;){const e=o[d++],t=o[d++];try{f=e(f)}catch(e){t.call(this,e);break}}try{l=Qe.call(this,f)}catch(e){return Promise.reject(e)}for(d=0,u=c.length;d<u;)l=l.then(c[d++],c[d++]);return l}getUri(e){return te(xe((e=je(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}M.forEach(["delete","get","head","options"],(function(e){nt.prototype[e]=function(t,n){return this.request(je(n||{},{method:e,url:t,data:(n||{}).data}))}})),M.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,s){return this.request(je(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}nt.prototype[e]=t(),nt.prototype[e+"Form"]=t(!0)}));const rt=nt;class st{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,s){n.reason||(n.reason=new Oe(e,r,s),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new st((function(t){e=t})),cancel:e}}}const it=st,ot={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ot).forEach((([e,t])=>{ot[t]=e}));const at=ot,ct=function e(n){const r=new rt(n),s=t(rt.prototype.request,r);return M.extend(s,rt.prototype,r,{allOwnKeys:!0}),M.extend(s,r,null,{allOwnKeys:!0}),s.create=function(t){return e(je(n,t))},s}(pe);ct.Axios=rt,ct.CanceledError=Oe,ct.CancelToken=it,ct.isCancel=Ee,ct.VERSION="1.7.2",ct.toFormData=G,ct.AxiosError=z,ct.Cancel=ct.CanceledError,ct.all=function(e){return Promise.all(e)},ct.spread=function(e){return function(t){return e.apply(null,t)}},ct.isAxiosError=function(e){return M.isObject(e)&&!0===e.isAxiosError},ct.mergeConfig=je,ct.AxiosHeaders=_e,ct.formToJSON=e=>de(M.isHTMLForm(e)?new FormData(e):e),ct.getAdapter=Ge,ct.HttpStatusCode=at,ct.default=ct;const lt=ct;class ut{constructor(e){this.query=e}async doSearch(){try{let e=await lt("https://forkify-api.herokuapp.com/api/search?q="+this.query);return this.result=e.data.recipes,this.result}catch(e){console.log("The is a problem: "+e)}}}const dt={searchForm:document.querySelector(".search"),searchInput:document.querySelector(".search__field"),searchResultList:document.querySelector(".results__list"),searchResultDiv:document.querySelector(".results"),pageButtons:document.querySelector(".results__pages"),recipeDiv:document.querySelector(".recipe"),shoppingList:document.querySelector(".shopping__list"),likesMenu:document.querySelector(".likes__field"),likesList:document.querySelector(".likes__list")},ft="loader",pt=e=>{const t=`\n    <div class="${ft}">\n    <svg>\n        <use href="img/icons.svg#icon-cw"></use>\n    </svg>\n    </div>`;e.insertAdjacentHTML("afterbegin",t)},ht=()=>{const e=document.querySelector(`.${ft}`);e&&e.parentElement.removeChild(e)},mt=e=>{const t=`<li>\n  <a class="results__link" href=#${e.recipe_id}>\n      <figure class="results__fig">\n          <img src="${e.image_url}" alt="Test">\n      </figure>\n      <div class="results__data">\n          <h4 class="results__name">${e.title}</h4>\n          <p class="results__author">${e.publisher}</p>\n      </div>\n  </a>\n</li>`;dt.searchResultList.insertAdjacentHTML("beforeend",t)},gt=()=>{dt.searchResultList.innerHTML="",dt.pageButtons.innerHTML=""},yt=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;const r=(t-1)*n,s=t*n;e.slice(r,s).forEach(mt);const i=Math.ceil(e.length/n);wt(t,i)},bt=(e,t,n)=>`<button class="btn-inline results__btn--${t}" data-goto=${e}>\n  <svg class="search__icon">\n      <use href="img/icons.svg#icon-triangle-${n}"></use>\n  </svg>\n  <span>Хуудас ${e}</span>\n  </button>`,wt=(e,t)=>{let n;1===e&&t>1?n=bt(2,"next","right"):e<t?(n=bt(e-1,"prev","left"),n+=bt(e+1,"next","right")):e===t&&(n=bt(e-1,"prev","left")),dt.pageButtons.insertAdjacentHTML("afterbegin",n)};class _t{constructor(e){this.id=e}async getRecipe(){const e=await lt("https://forkify-api.herokuapp.com/api/get?rId="+this.id);this.publisher=e.data.recipe.publisher,this.ingredients=e.data.recipe.ingredients,this.source_url=e.data.recipe.source_url,this.image_url=e.data.recipe.image_url,this.publisher_url=e.data.recipe.publisher_url,this.title=e.data.recipe.title,this.social_rank=e.data.recipe.social_rank}calcTime(){this.time=5*this.ingredients.length}calcHuniiToo(){this.huniiToo=4}}var vt=n(797),Et=n.n(vt);class St{constructor(){this.items=[]}deleteItem(e){const t=this.items.findIndex((t=>t.id===e));this.items.splice(t,1)}addItem(e){let t={id:Et()(),item:e};return this.items.push(t),t}}class Ot{constructor(){this.likes=[]}addLike(e,t,n,r){const s={id:e,title:t,publisher:n,img:r};return this.likes.push(s),s}deleteLike(e){const t=this.likes.findIndex((t=>t.id===e));this.likes.splice(t,1)}isLiked(e){return-1!==this.likes.findIndex((t=>t.id===e))}getNumberOfLikes(){return this.likes.length}}const Rt=e=>{const t=e?"icon-heart":"icon-heart-outlined";document.querySelector(".recipe__love use").setAttribute("href",`img/icons.svg#${t}`)},Tt=e=>{dt.likesMenu.style.visibility=e>0?"visible":"hidden"},At={};Tt(0);dt.searchForm.addEventListener("submit",(e=>{e.preventDefault(),(async()=>{const e=dt.searchInput.value;e&&(At.search=new ut(e),dt.searchInput.value="",gt(),pt(dt.searchResultDiv),await At.search.doSearch(),ht(),void 0===At.search.result?alert("Hailtaar ilertsgui"):yt(At.search.result))})()})),dt.pageButtons.addEventListener("click",(e=>{const t=e.target.closest(".btn-inline");if(t){const e=parseInt(t.dataset.goto,10);console.log(e),gt(),yt(At.search.result,e)}}));const kt=async()=>{const e=window.location.hash.replace("#","");At.likes||(At.likes=new Ot),e&&(At.recipe=new _t(e),dt.recipeDiv.innerHTML="",pt(dt.recipeDiv),(e=>{Array.from(document.querySelectorAll(".results__link")).forEach((e=>e.classList.remove("results__link--active")));const t=document.querySelector(`.results__link[href*="${e}"]`);t&&t.classList.add("results__link--active")})(e),await At.recipe.getRecipe(),ht(),At.recipe.calcTime(),At.recipe.calcHuniiToo(),((e,t)=>{const n=`\n    <figure class="recipe__fig">\n        <img src="${e.image_url}" alt=${e.title} class="recipe__img">\n        <h1 class="recipe__title">\n            <span>${e.title}</span>\n        </h1>\n    </figure>\n    <div class="recipe__details">\n    <div class="recipe__info">\n        <svg class="recipe__info-icon">\n            <use href="img/icons.svg#icon-stopwatch"></use>\n        </svg>\n        <span class="recipe__info-data recipe__info-data--minutes">${e.time}</span>\n        <span class="recipe__info-text"> минут </span>\n    </div>\n    <div class="recipe__info">\n        <svg class="recipe__info-icon">\n            <use href="img/icons.svg#icon-man"></use>\n        </svg>\n        <span class="recipe__info-data recipe__info-data--people">${e.huniiToo}</span>\n        <span class="recipe__info-text"> хүний орц</span>\n\n        <div class="recipe__info-buttons">\n            <button class="btn-tiny">\n                <svg>\n                    <use href="img/icons.svg#icon-circle-with-minus"></use>\n                </svg>\n            </button>\n            <button class="btn-tiny">\n                <svg>\n                    <use href="img/icons.svg#icon-circle-with-plus"></use>\n                </svg>\n            </button>\n        </div>\n\n    </div>\n    <button class="recipe__love">\n        <svg class="header__likes">\n            <use href="img/icons.svg#icon-heart${t?"":"-outlined"}"></use>\n        </svg>\n    </button>\n    </div>\n\n\n\n    <div class="recipe__ingredients">\n    <ul class="recipe__ingredient-list">\n\n        ${e.ingredients.map((e=>`\n    <li class="recipe__item">\n        <svg class="recipe__icon">\n            <use href="img/icons.svg#icon-check"></use>\n        </svg>\n        <div class="recipe__ingredient">\n            ${e}\n        </div>\n    </li>`)).join(" ")}\n        \n    </ul>\n\n    <button class="btn-small recipe__btn">\n        <svg class="search__icon">\n            <use href="img/icons.svg#icon-shopping-cart"></use>\n        </svg>\n        <span>САГСАНД ХИЙХ</span>\n    </button>\n    </div>\n\n    <div class="recipe__directions">\n    <h2 class="heading-2">Хэрхэн бэлтгэх вэ</h2>\n    <p class="recipe__directions-text">\n        Жорыг бэлтгэж оруулсан\n        <span class="recipe__by">${e.publisher}</span>. Манай вэб сайтаас жорын зааврыг авна уу\n    </p>\n    <a class="btn-small recipe__btn" href="${e.source_url}" target="_blank">\n        <span>ЗААВАР ҮЗЭХ</span>\n        <svg class="search__icon">\n            <use href="img/icons.svg#icon-triangle-right"></use>\n        </svg>\n\n    </a>\n    </div>`;dt.recipeDiv.insertAdjacentHTML("afterbegin",n)})(At.recipe,At.likes.isLiked(e)))};["hashchange","load"].forEach((e=>window.addEventListener(e,kt)));dt.recipeDiv.addEventListener("click",(e=>{e.target.matches(".recipe__btn, .recipe__btn *")?(At.list=new St,dt.shoppingList.innerHTML="",At.recipe.ingredients.forEach((e=>{(e=>{const t=`\n    <li class="shopping__item" data-itemid=${e.id}>\n        <p class="shopping__description">${e.item}</p>\n        <button class="shopping__delete btn-tiny">\n            <svg>\n                <use href="img/icons.svg#icon-circle-with-cross"></use>\n            </svg>\n        </button>\n    </li>`;dt.shoppingList.insertAdjacentHTML("beforeend",t)})(At.list.addItem(e))}))):e.target.matches(".recipe__love, .recipe__love * ")&&(()=>{At.likes||(At.likes=new Ot);const e=At.recipe.id;At.likes.isLiked(e)?(At.likes.deleteLike(e),(e=>{const t=document.querySelector(`.likes__link[href*="${e}"]`).parentElement;t&&t.parentElement.removeChild(t)})(e),Rt(!1)):((e=>{const t=`\n            <li>\n                <a class="likes__link" href="#${e.id}">\n                    <figure class="likes__fig">\n                        <img src="${e.img}" alt="Test">\n                    </figure>\n                    <div class="likes__data">\n                        <h4 class="likes__name">${e.title}</h4>\n                        <p class="likes__author">${e.publisher}</p>\n                    </div>\n                </a>\n            </li>\n    `;dt.likesList.insertAdjacentHTML("beforeend",t)})(At.likes.addLike(e,At.recipe.title,At.recipe.publisher,At.recipe.image_url)),Rt(!0)),Tt(At.likes.getNumberOfLikes())})()})),dt.shoppingList.addEventListener("click",(e=>{const t=e.target.closest(".shopping__item").dataset.itemid;At.list.deleteItem(t),(e=>{const t=document.querySelector(`[data-itemid="${e}"]`);t.parentElement.removeChild(t)})(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,